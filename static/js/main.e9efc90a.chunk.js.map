{"version":3,"sources":["api/api.ts","api/posts.ts","api/users.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","deleteComment","commentId","method","then","getUsers","PostsList","posts","selectedPostId","setSelectedPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","addNewComment","postId","useState","nameInput","setNameInput","emailInput","setEmailInput","bodyTextArea","setBodyTextArea","onSubmit","event","preventDefault","name","email","body","placeholder","required","value","onChange","target","PostDetails","postDetails","postsComments","setPostsComments","visibleComments","setVisibleComments","deleteCommentServer","filter","comment","length","data","newComment","options","headers","JSON","stringify","addComment","App","users","setUsers","selectedUserId","setSelectedUserId","setPosts","setPostDetails","useEffect","postFromServer","getPostComments","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9efc90a.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = (userId: number) => {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const addComment = (newComment: Partial<CommentInfo>) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  };\n\n  return fetch(`${BASE_URL}/comments`, options)\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number): Promise<number> => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(response => response.json());\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setSelectedPostId: (id: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  const getSelectedPost = (id: number) => {\n    if (selectedPostId !== 0 && selectedPostId !== id) {\n      setSelectedPostId(0);\n    }\n\n    setSelectedPostId(id);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => getSelectedPost(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, FormEvent } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  addNewComment: (data: Partial<CommentInfo>) => void,\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addNewComment, postId }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [bodyTextArea, setBodyTextArea] = useState('');\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addNewComment({\n      postId,\n      name: nameInput,\n      email: emailInput,\n      body: bodyTextArea,\n    });\n\n    setNameInput('');\n    setEmailInput('');\n    setBodyTextArea('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={nameInput}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setNameInput(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={emailInput}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setEmailInput(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={bodyTextArea}\n          onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n            setBodyTextArea(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { addComment, deleteComment } from '../../api/posts';\nimport './PostDetails.scss';\n\ntype Props = {\n  postDetails: Post,\n  postsComments: CommentInfo[],\n  setPostsComments: (comments: CommentInfo[]) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postDetails,\n  postsComments,\n  setPostsComments,\n}) => {\n  const [visibleComments, setVisibleComments] = useState(true);\n\n  const addNewComment = (data: Partial<CommentInfo>) => {\n    addComment(data)\n      .then(response => setPostsComments([...postsComments, response]));\n  };\n\n  const deleteCommentServer = async (commentId: number) => {\n    await deleteComment(commentId);\n    setPostsComments(postsComments.filter(comment => comment.id !== commentId));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails?.body}\n        </p>\n      </section>\n\n      {postDetails ? (\n        <section className=\"PostDetails__comments\">\n          {visibleComments ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setVisibleComments(!visibleComments)}\n            >\n              Hide&nbsp;\n              {postsComments.length}\n              &nbsp;comments\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setVisibleComments(!visibleComments)}\n            >\n              Show&nbsp;\n              {postsComments.length}\n              &nbsp;comments\n            </button>\n          )}\n\n          <ul className=\"PostDetails__list\">\n            {visibleComments && postsComments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteCommentServer(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n\n        </section>\n      ) : (\n        <section>\n          <h5>No selected post</h5>\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addNewComment={addNewComment}\n            postId={postDetails.id}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  getPosts,\n  getUserPosts,\n  getPostDetails,\n  getPostComments,\n} from './api/posts';\nimport { getUsers } from './api/users';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postsComments, setPostsComments] = useState<CommentInfo[]>([]);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      getPosts()\n        .then(response => {\n          setPosts(response);\n        });\n    } else {\n      getUserPosts(selectedUserId)\n        .then((postFromServer) => setPosts(postFromServer));\n    }\n\n    setSelectedPostId(0);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  useEffect(() => {\n    if (selectedPostId !== 0) {\n      getPostDetails(selectedPostId)\n        .then(response => setPostDetails(response));\n    } else {\n      setPostDetails(null);\n    }\n\n    getPostComments(selectedPostId)\n      .then(response => setPostsComments(response));\n  }, [selectedPostId]);\n\n  const onUserChoice = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"temp-id\">\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            id=\"temp-id\"\n            onChange={onUserChoice}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n\n          {postDetails ? (\n            <PostDetails\n              postDetails={postDetails}\n              postsComments={postsComments}\n              setPostsComments={setPostsComments}\n            />\n          ) : (\n            <p>No selected post</p>\n          )}\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}